# creating MongoDB Helper class 


# Controller for DB Operations

from pymongo.mongo_client import MongoClient
import datetime
import hashlib

class MongoDBHelper:

    def __init__(self):
        # Create a new client and connect to the server
        self.client = MongoClient("mongodb+srv://Savreet_28:Savreet28@cluster1.yyi1481.mongodb.net/?retryWrites=true&w=majority&appName=Cluster1")
        print('[MongoDBHelper] Connection Created')

    def select_db(self, db_name='gw2025', collection='users'):
        self.db = self.client[db_name]
        self.collection = self.db[collection]
        print(f'[MongoDBHelper] DB {db_name} Collection {collection} Selected')

    def insert(self, document):
        result = self.collection.insert_one(document)
        print(f'[MongoDBHelper] Document [Inserted] in collection {self.collection.name}')
        return result

    def delete(self, query):
        result = self.collection.delete_one(query)
        print(f'[MongoDBHelper] Document [Deleted] from collection {self.collection.name}')
        return result

    def update(self, query, document):
        result = self.collection.update_one(query, {'$set': document})
        print(f'[MongoDBHelper] Document [Updated] in collection {self.collection.name}')
        return result

    def fetch(self, query={}):
        documents = self.collection.find(query)
        print(f'[MongoDBHelper] Documents [Fetched] from collection {self.collection.name}')
        return list(documents)


class User:

    def __init__(self, name=None, phone=None, email=None, 
                 password=None, address=None, gender=None, age=None):
        self.name = name
        self.phone = phone
        self.email = email
        self.password = password
        self.address = address
        self.gender = gender
        self.age = age
        self.created_on = datetime.datetime.now()
        print('[User] Object Created')

    def input_user_details(self):
        while True:
            errors = []
            self.name = input('Enter Your Name: ')
            if len(self.name.strip()) == 0:
                errors.append('[Error] Name Cannot be Empty')

            self.phone = input('Enter Your Phone: ')
            if not self.phone.isdigit() or len(self.phone) != 10:
                errors.append('[Error] Phone Number Must be 10 Digits')

            self.email = input('Enter Your Email: ')
            if len(self.email.strip()) == 0 or '@' not in self.email or '.' not in self.email:
                errors.append('[Error] Email is not Correct')

            raw_password = input('Enter Your Password (Min 5 Characters): ')
            if len(raw_password) < 5:
                errors.append('[Error] Password must be minimum 5 characters')
            else:
                self.password = hashlib.sha256(raw_password.encode('utf-8')).hexdigest()

            self.address = input('Enter Your Address: ')
            if len(self.address.strip()) == 0:
                errors.append('[Error] Address Cannot be Empty')

            self.gender = input('Enter Your Gender (male/female): ').lower()
            if self.gender not in ['male', 'female']:
                errors.append('[Error] Gender must be male or female')

            try:
                self.age = int(input('Enter Your Age: '))
                if self.age < 15:
                    errors.append('[Error] Age cannot be less than 15')
            except ValueError:
                errors.append('[Error] Age must be a number')

            if errors:
                for error in errors:
                    print(error)
                print('Please correct the above errors and try again.\n')
            else:
                break

    def show(self):
        print(f'\n~~~~~~~~~~ {self.name} Details ~~~~~~~~~~')
        data = 'Phone: {phone} | Email: {email} | Password: {password}\nAddress: {address} | Age: {age}'.format_map(vars(self))
        print(data)

    def to_document(self):
        return vars(self)


def main():
    db_helper = MongoDBHelper()
    db_helper.select_db(db_name='gw2025', collection='users')

    user = User()
    user.input_user_details()
    user.show()

    result = db_helper.insert(document=user.to_document())
    print('User Saved in MongoDB with _id as:', result.inserted_id)


if __name__ == '__main__':
    main()
