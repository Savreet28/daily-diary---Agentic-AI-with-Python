# perfoeming operations on STRING


class Car:
    
    # Init function
    # to create object with initial data
    def __init__(self, name=None, brand=None, price=None, range=None, hp=None):
        self.name = name
        self.brand = brand
        self.price = price
        self.range = range
        self.hp = hp
        self.index = None

        # Internal usage to create linked list
        self.next = None
        self.previous = None

    # to write data in object as per user
    def user_input(self):
        self.name = input('Enter Car Name: ')
        self.brand = input('Enter Car Brand: ')
        self.price = float(input('Enter Car Price: '))
        self.range = int(input('Enter Car Range: '))
        self.hp = int(input('Enter Car Horse Power: '))


    # String Function
    # to show the data of object
    # you can directly print reference variable, which will 
    # automatically execute string function
    def __str__(self):

        car_string = """
~~~~~~~~~~~~~{}~~~~~~~~~~~~~
Brand: {}
Price: {}
Range: {}
HP: {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
""".format(self.name, self.brand, self.price, self.range, self.hp)

        return car_string
    

# car = Car(name='Harrier EV', brand='Tata', price=23.8, range=650, hp=390)
# # car = Car()
# # car.user_input()
# print(car) # car.__str__()


# Circular Doubly Linked List of car list 

class CarList:

    def __init__(self):
        self.head = None
        self.tail = None
        self.size = 0

    # add is going to add a car in the linked list
    def add(self, car):
        

        if self.head == None:
            self.head = car
            self.tail = car
            car.index = self.size
            self.size += 1
        else:
            car.index = self.size
            self.size += 1
            self.tail.next = car
            car.previous = self.tail
            car.next = self.head
            self.head.previous = car
            self.tail = car

    def iterate(self, direction=0):

        if direction == 0:
            car = self.head
            print(car)
            while car.next != self.head:
                car = car.next
                print(car)
        else:
            car = self.tail
            print(car)
            while car.previous != self.tail:
                car = car.previous
                print(car)


    def delete(self, name):
        
        car = self.head
        
        if car.name == name:
            car.previous.next = car.next
            car.next.previous = car.previous
            self.size -= 1
            del car
        
        while car.next != self.head:
            car = car.next
            if car.name == name:
                car.previous.next = car.next
                car.next.previous = car.previous
                self.size -= 1
                del car
                break
            

    def delete_head(self):
        # New Head
        self.head = self.head.next
        self.head.previous = self.tail
        self.tail.next = self.head
        self.size -= 1

    def delete_tail(self):
        # New tail
        self.tail = self.tail.previous
        self.tail.next = self.head
        self.head.previous = self.tail
        self.size -= 1

    def add_in_front(self, car):
        car.next = self.head
        self.head.previous = car
        car.previous = self.tail
        self.head = car
        self.tail.next = self.head
        self.size += 1

    def add_in_between(self, car1, car2, car):
        car.next = car2
        car.previous = car1
        car1.next = car
        car2.previous = car
        self.size += 1

    def bubble_sort(self):
        pass


list = CarList() # head, tail and size

car1 = Car(name='1. Harrier EV')
car2 = Car(name='2. Be6')
car3 = Car(name='3. Windsor EV')
car4 = Car(name='4. Hector EV')
car5 = Car(name='5. EV9')
car6 = Car(name='6. Nexon EV')
car7 = Car(name='7. Comet EV')

list.add(car=car1)
list.add(car=car2)
list.add(car=car3)
list.add(car=car4)
list.add(car=car5)
list.add_in_between(car1=car2, car2=car3, car=car6)
list.add_in_front(car=car7)

# list.delete(name='3. Windsor EV')
# list.delete_head()
# list.delete_tail()
print('size of list is:', list.size)

list.iterate()
